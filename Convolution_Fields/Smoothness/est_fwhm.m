function fwhm_est = est_fwhm( lat_data, Kernel, lat_masked )
% EST_FWHM( lat_data, Kernel, lat_masked ) takes in lattice data, smoothes 
% with some kernel and estimates the FWHM of the resulting convolution field.
%--------------------------------------------------------------------------
% ARGUMENTS
% Mandatory
%  lat_data  an object of class Field with fiberD == 1.
%  Kernel    either an object of class SepKernel or a numeric.
%            If class SepKernel:
%              if derivtype = 0: the fields 'kernel' and 'truncation' must
%                                be specified.
%              if derivtype = 1: the fields 'dkernel' and 'dtruncation'
%                                must be specified.
%              if derivtype = 2: the fields 'd2kernel' and 'd2truncation'
%                                must be specified.
%
%            If Kernel is numeric, the convolution field is generated by 
%            smoothing with an isotropic Gaussian kernel with FWHM = Kernel.
%            Truncation and adjust_kernel are set to be default values.
% Optional
%  lat_masked   a logical, if true lat_data is masked by the provided mask 
%            in the lat_data Field object. Default is true.
%--------------------------------------------------------------------------
% OUTPUT
% 
%--------------------------------------------------------------------------
% EXAMPLES
% %% %% 1D Examples
% %% Simple 1D example
% nvox = 100; nsubj = 50;
% lat_data = wnfield(nvox, nsubj); FWHM = 2;
% est_fwhm( lat_data, FWHM, 0 )
% est_smooth(fconv(lat_data.field, FWHM))
% 
% %% %% 2D Examples
% %% Simple 2D example
% Dim = [50,50]; nsubj = 50;
% lat_data = wnfield(nvox, nsubj); FWHM = 2;
% est_fwhm( lat_data, FWHM, 0 )
% est_smooth(fconv(lat_data.field, FWHM))
% 
% %% %% 3D Examples
% %% Simple 3D example
% Dim = [25,25,25]; nsubj = 50;
% lat_data = wnfield(nvox, nsubj); FWHM = 2;
% est_fwhm( lat_data, FWHM, 0 )
% est_smooth(fconv(lat_data.field, FWHM))
%--------------------------------------------------------------------------
% AUTHOR: Samuel Davenport
%--------------------------------------------------------------------------

%%  Check mandatory input and get important constants
%--------------------------------------------------------------------------
D = lat_data.D;
% Get variable domain counter
indexD = repmat( {':'}, 1, D );

%%  Check optional input
%--------------------------------------------------------------------------
% @Sam: Not sure whether you want this to be the default
if ~exist( 'lat_masked', 'var' )
    lat_masked = 1;
end

%%  Main Function Loop
%--------------------------------------------------------------------------
% Make sure convolution evaluated on original grid size
if isnumeric( Kernel )
    params = ConvFieldParams( Kernel*ones( [ 1 D ] ), 0, 0, lat_masked );
else
    params = ConvFieldParams( Kernel, 0, 0, lat_masked );
end

cfield  = convfield_Field( lat_data, params, 0 );
dcfield = convfield_Field( lat_data, params, 1 );

Lambda = Riemmetric_est( cfield, dcfield );
% Lambda_data = Lambda.field(Lambda.mask); %@Fab is there any easy way to
% do that?

% if lat_data.D == 1
%     stat_Lambda_diag = mean(Lambda.field(Lambda.mask(:)));
% else
stat_Lambda_diag = zeros(1,lat_data.D);
for d = 1:lat_data.D
    dthLambdaentry = Lambda.field(indexD{:}, d, d);
    stat_Lambda_diag(d) = mean(dthLambdaentry(Lambda.mask(:)));
end

fwhm_est = sqrt(4*log(2)./stat_Lambda_diag);

end

